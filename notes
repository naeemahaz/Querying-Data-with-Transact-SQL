Familiarize yourself with the Customer table by writing a Transact-SQL query that retrieves all columns for all customers.

SELECT * FROM SALESLT.CUSTOMER
-----------------------------------------------------------------------------------

Create a table that lists all customer contact names. The table should include the 
Title, FirstName, MiddleName, LastName and Suffix of all customers.

SELECT TITLE,FIRSTNAME,MIDDLENAME,LASTNAME,SUFFIX
FROM SalesLT.Customer;
--------------------------------------------------------------------------------------

Complete the query to list the following elements for all customers:
The salesperson
A column named CustomerName that displays how the customer contact should be greeted (e.g. "Mr Smith").
The customer's phone number (Phone)
Don't forget to space out the contents of your CustomerName column with + ' ' + and use the alias provided.

SELECT SalesPerson, Title + ' ' + LastName AS CustomerName, PHONE
FROM SalesLT.Customer;
-------------------------------------------------------------------------------------

Provide a list of all customer companies in the format <Customer ID>: <Company Name> 
(e.g. 78: Preferred Bikes). You'll need to use both CAST() and VARCHAR in your solution. Don't forget to use the alias provided.

SELECT CAST(CustomerID AS VARCHAR) + ': ' + CompanyName AS CustomerCompany
FROM SalesLT.Customer;
---------------------------------------------------------------------------------------

Complete the query on the right to create the 2-column table that's specified above.

SELECT SalesOrderNumber + ' (' + STR(RevisionNumber, 1) + ')' AS OrderRevision,
	   CONVERT(NVARCHAR(30), OrderDate, 102) AS OrderDate
FROM SalesLT.SalesOrderHeader;
----------------------------------------------------------------------------------------

Retrieve customer contact names including middle names when they're known.

SELECT FirstName + ' ' + ISNULL(MiddleName + ' ', '') + LastName
AS CustomerName
FROM SalesLT.Customer;
---------------------------------------------------------------------------------------

Write a query that returns a list of customer IDs in one column, and a second column 
called PrimaryContact that contains the email address if known, and otherwise the phone number.

SELECT CustomerID, COALESCE(EmailAddress, Phone) AS PrimaryContact
FROM SalesLT.Customer;
------------------------------------------------------------------------------------------

Write a query to list sales order IDs and order dates with a column named ShippingStatus that contains the text 
'Shipped' for orders with a known ship date, and 'Awaiting Shipment' for orders with no ship date.

SELECT SalesOrderID, OrderDate,
  CASE
    WHEN Shipdate IS NULL THEN 'Awaiting Shipment'
    ELSE 'Shipped'
  END AS ShippingStatus
FROM SalesLT.SalesOrderHeader;
---------------------------------------------------------------------------------------------

Finish the Transact-SQL query that retrieves all values for City and StateProvince, without duplicates, from the Address table.

SELECT Distinct City, StateProvince
FROM SalesLT.Address;
------------------------------------------------------------------------------------------------

Finish the query to retrieve the names of the top ten percent of products by weight.

SELECT top 10 percent weight, Name
FROM SalesLT.Product
order by Weight desc;
--------------------------------------------------------------------------------------------

Tweak the query to list the heaviest 100 products not including the ten most heavy ones.

SELECT weight, productID, Name
FROM SalesLT.Product
ORDER BY Weight DESC
OFFSET 10 rows fetch NEXT 100 rows ONLY;
-----------------------------------------------------------------------------------------------

Write a query to find the names, colors, and sizes of the products with a product model ID of 1.

SELECT Name, Color, Size
FROM SalesLT.Product
WHERE ProductModelID = 1;
----------------------------------------------------------------------------------------------

Retrieve the product number and name of the products that have a Color of 'Black', 'Red', or 'White' and a Size of 'S' or 'M'.

SELECT ProductNumber, Name
FROM SalesLT.Product
WHERE Color IN ('Black', 'Red', 'White') AND Size IN ('S', 'M');
----------------------------------------------------------------------------------------------

Retrieve the product number, name, and list price of products that have a product number beginning with 'BK-'.

SELECT ProductNumber, Name, ListPrice
FROM SalesLT.Product
WHERE ProductNumber like 'BK-%';
-----------------------------------------------------------------------------------------------

Modify your previous query to retrieve the product number, name, and list price of products with product 
number beginning with 'BK-' followed by any character other than 'R', and ending with a '-' followed by any two numerals.
Remember:
to match any string of zero or more characters, use %
to match characters that are not R, use [^R]
to match a numeral, use [0-9]

SELECT ProductNumber, Name, ListPrice
FROM SalesLT.Product
WHERE ProductNumber LIKE 'BK-[^R]%-[0-9][0-9]';
------------------------------------------------------------------------------------------------

Write a query that returns the company name from the Sale.Customer table, 
the sales order ID and total due from the SalesLT.SalesOrderHeader table. Make sure to use the 
aliases provided, and default column names elsewhere.

SELECT c.CompanyName, oh.SalesOrderId, oh.TotalDue
FROM SalesLT.Customer AS c
JOIN SalesLT.SalesOrderHeader AS oh
ON c.CustomerID = oh.CustomerID;
-------------------------------------------------------------------------------------------------

Extend your customer orders query to include the main office address for each customer, 
including the full street address, city, state or province, postal code, and country or region. 
Make sure to use the aliases provided, and default column names elsewhere.

SELECT c.CompanyName, a.AddressLine1, ISNULL(a.AddressLine2, '') AS AddressLine2, a.City, a.StateProvince, a.PostalCode, a.CountryRegion, oh.SalesOrderID, oh.TotalDue
FROM SalesLT.Customer AS c
JOIN SalesLT.SalesOrderHeader AS oh
ON oh.CustomerID = c.CustomerID
JOIN SalesLT.CustomerAddress AS ca
ON c.CustomerID = ca.CustomerID AND AddressType = 'Main Office'
JOIN SalesLT.Address AS a
ON ca.AddressID = a.AddressID;
------------------------------------------------------------------------------------------------

Customers who have not placed any orders should be included at the bottom of 
the list with NULL values for the order ID and total due. Make sure to use the aliases provided, 
and default column names elsewhere.

SELECT c.CompanyName, c.FirstName, c.LastName, oh.SalesOrderID, oh.TotalDue
FROM SalesLT.Customer AS c
LEFT JOIN SalesLT.SalesOrderHeader AS oh
ON c.CustomerID = oh.CustomerID
ORDER By oh.SalesOrderID desc;
------------------------------------------------------------------------------------------------

Write a query that returns a list of customer IDs, company names, contact names 
(first name and last name), and phone numbers for customers with no address stored in the database. 
Make sure to use the aliases provided, and default column names elsewhere.

SELECT c.CompanyName, c.FirstName, c.LastName, c.Phone
FROM SalesLT.Customer AS c
LEFT JOIN SalesLT.CustomerAddress AS ca
ON c.CustomerID = ca.CustomerID
WHERE ca.AddressType IS NULL;
------------------------------------------------------------------------------------------------

Write a query that returns a column of customer IDs for customers who have never placed an order, 
and a column of product IDs for products that have never been ordered.
Each row with a customer ID should have a NULL product ID (because the customer 
has never ordered a product) and each row with a product ID should have a NULL customer ID 
(because the product has never been ordered by a customer).
Make sure to use the aliases provided, and default column names elsewhere.

SELECT c.CustomerID, p.ProductID
FROM SalesLT.Customer AS c
FULL JOIN SalesLT.SalesOrderHeader AS oh
ON c.CustomerID = oh.CustomerID
FULL JOIN SalesLT.SalesOrderDetail AS od
ON od.SalesOrderID = oh.SalesOrderID
FULL JOIN SalesLT.Product AS p
ON p.ProductID = od.ProductID
WHERE oh.SalesOrderNumber IS NULL
ORDER BY p.ProductID, c.CustomerID;
--------------------------------------------------------------------------------------------

Write a query that retrieves the company name, first line of the street address, city, 
and a column named AddressType with the value 'Billing' for customers where the address 
type in the SalesLT.CustomerAddress table is 'Main Office'. Make sure to use the aliases provided, 
and default column names elsewhere.

SELECT C.CompanyName, A.AddressLine1, A.CITY, 'Billing' AS AddressType
FROM SalesLT.Customer AS c
JOIN SalesLT.CustomerAddress AS ca
ON c.CustomerID = ca.CustomerID
JOIN SalesLT.Address AS a
ON a.AddressID = ca.AddressID
WHERE ca.AddressType = 'Main Office';
-----------------------------------------------------------------------------------------

Adapt the query to retrieve the company name, first line of the street address, city, 
and a column named AddressType with the value 'Shipping' for customers where the address type 
in the SalesLT.CustomerAddress table is 'Shipping'. Make sure to use the aliases provided, 
and default column names elsewhere.

SELECT c.CompanyName, a.AddressLine1, a.City, 'Shipping' AS AddressType
FROM SalesLT.Customer AS c
JOIN SalesLT.CustomerAddress AS ca
ON c.CustomerID = ca.CustomerID
JOIN SalesLT.Address AS a
ON ca.AddressID = a.AddressID
WHERE ca.AddressType = 'Shipping';

-----------------------------------------------------------------------------------------------

Use UNION ALL to combine the results returned by the two queries to create a 
list of all customer addresses that is sorted by company name and then address type.

SELECT c.CompanyName, a.AddressLine1, a.City, 'Billing' AS AddressType
FROM SalesLT.Customer AS c
JOIN SalesLT.CustomerAddress AS ca
ON c.CustomerID = ca.CustomerID
JOIN SalesLT.Address AS a
ON ca.AddressID = a.AddressID
WHERE ca.AddressType = 'Main Office'
Union all
SELECT c.CompanyName, a.AddressLine1, a.City, 'Shipping' AS AddressType
FROM SalesLT.Customer AS c
JOIN SalesLT.CustomerAddress AS ca
ON c.CustomerID = ca.CustomerID
JOIN SalesLT.Address AS a
ON ca.AddressID = a.AddressID
WHERE ca.AddressType = 'Shipping'
ORDER BY c.CompanyName, AddressType;
---------------------------------------------------------------------------------------------
Write a query that returns the company name of each company that appears in a table of 
customers with a 'Main Office' address, but not in a table of customers 
with a 'Shipping' address.

SELECT c.CompanyName
FROM SalesLT.Customer AS c
JOIN SalesLT.CustomerAddress AS ca
ON c.CustomerID = ca.CustomerID
JOIN SalesLT.Address AS a
ON ca.AddressID = a.AddressID
WHERE ca.AddressType = 'Main Office'
EXCEPT
SELECT c.CompanyName
FROM SalesLT.Customer AS c
JOIN SalesLT.CustomerAddress AS ca
ON c.CustomerID = ca.CustomerID
JOIN SalesLT.Address AS a
ON ca.AddressID = a.AddressID
WHERE ca.AddressType = 'Shipping'
ORDER BY c.CompanyName;
--------------------------------------------------------------------------------------------------

Write a query that returns the company name of each company that appears in a table of 
customers with a 'Main Office' address, and also in a table of customers with a 'Shipping' 
address. Make sure to use the aliases provided, and default column names elsewhere.

Select c.CompanyName
From SalesLT.Customer AS c
Join SalesLT.CustomerAddress AS ca
ON c.CustomerID = ca.CustomerID
JOIN SalesLT.Address AS a
ON a.AddressID = ca.AddressID
Where ca.AddressType = 'Main Office'
INTERSECT
Select c.CompanyName
FROM SalesLT.Customer AS c
Join SalesLT.CustomerAddress AS ca
ON c.CustomerID = ca.CustomerID
JOIN SalesLT.Address AS a
ON a.AddressID = ca.AddressID
Where ca.AddressType = 'Shipping'
ORDER BY c.CompanyName;
-------------------------------------------------------------------------------------------------









